{"version":3,"sources":["components/Table.png","../../src/api/shared/consts.ts","components/Player.tsx","components/Table.tsx","components/main.tsx","api/Utils.ts","api/Actions.ts","api/WebsocketGameConnection.tsx","api/NetworkApi.tsx","App.tsx","serviceWorker.tsx","index.tsx"],"names":["module","exports","Object","freeze","HOLDEM","GameState","UNINITIALIZED","PREFLOP","POSTFLOP","POSTTURN","POSTRIVER","SHOWDOWN","ActionNames","PENDING","ACCEPTED","FAILED","CLOSE_NORMAL","CLOSE_GOING_AWAY","UNSUPPORTED_PAYLOAD","INVALID_AUTH","NO_SUCH_HAND","NOT_PERMITTED","NO_SUCH_TABLE","CALL","FOLD","BET","CHECK","ALL_IN","WELCOME","INFO","JOIN","ACCEPT_JOIN","INVALID_PERMISSION","REQUEST_START_HAND","ACCEPT_HAND","SKIP_HAND","CHIPS","ACCEPT_CHIPS","LEAVE","EventNames","START_HAND","HAND_BEGIN","HAND_END","REQUEST_ACTION","DEAL","HAND_STATE","FLOP","TURN","RIVER","VERIFY_CHIPS_REQUEST","Player","player","this","props","event","lastAction","JSON","parse","style","backgroundColor","inHand","undefined","display","flexDirection","justifyContent","marginLeft","marginRight","fontWeight","profile","username","stackSize","activeBet","name","data","bet_data","bet_amount","React","Component","ACTIVE_NOTIF","Table","api","getLoggedInProfile","Error","state","model","cards","game","isHost","connectToTable","inviteCode","then","connection","setState","onHostChanged","onEvent","onReceiveEvent","bind","setTimeout","send","actions","welcome","Notification","requestPermission","catch","exc","console","error","card_data","handState","state_data","mainPot","pots","winners","length","me","getOwnProfile","indexOf","id","alert","yourTurn","close","activeBets","players","map","p","Math","max","color","START_HAND_BUTTON","Button","variant","onClick","t","getActiveTable","startHand","acceptChips","onLeaveTable","find","ns","nextSpeaker","yourBet","check","call","getActiveBet","bet","fold","description","fontStyle","hasBet","hand","marginTop","alignItems","width","flexGrow","height","backgroundImage","table","backgroundRepeat","backgroundSize","renderInviteCode","communityCards","card","key","renderProfiles","renderState","renderCards","renderGameButtons","renderControlButtons","topbar","barItem","textDecoration","padding","Main","page","user","action","password","onLoginChanged","_profile","log","setStateFromApi","renderHomepage","renderGame","Alert","Link","renderLoginButton","logout","Card","Title","Subtitle","className","createTable","smallBlind","bigBlind","OverlayTrigger","placement","delay","show","hide","overlay","Tooltip","Badge","pill","disabled","isLoggedIn","renderSelectedTable","renderNewGameMaker","disconnectFromTable","renderTopBar","renderMainContent","renderLoginModal","renderJoinModal","Modal","onHide","Header","closeButton","Body","Form","Group","controlId","Label","type","value","onChange","e","target","Footer","logIn","err","stringify","onMount","WebsocketUtils","path","websocketProtocolByLocation","window","location","hostname","websocketPortWithColonByLocation","pathname","protocol","defaultPort","port","Actions","origin","withBetData","amount","parseInt","is_all_in","_requestId","isAllIn","contents","WebsocketGameConnection","tableId","ws","_onEvent","_onHostChange","queryString","querystring","encode","token","url","websocketUrlByPath","NetworkApi","API_PREFIX_NO_LEADING_SLASH","WebSocket","forPlayer","Promise","resolve","reject","listenerOpen","listenerError","onerror","onopen","readyState","OPEN","callback","onmessage","toString","welcomeData","welcome_data","is_host","_loggedInProfile","_ws","_onLoginChangeCallback","network","interceptors","response","use","status","headers","withCredentials","config","post","_requestOptions","success","Cookies","get","localStorage","getItem","_setProfile","refreshProfile","prof","leave","removeItem","connect","setItem","email","pin","remove","set","API_PREFIX","axios","create","baseURL","App","document","title","Boolean","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fb7a01aa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Table.cc43aec9.png\";","export const GameType = Object.freeze({\n  HOLDEM: 0,\n  // TODO: add new game types.\n});\n\nexport const GameState = Object.freeze({\n  UNINITIALIZED: -1, /* waiting */\n  PREFLOP: 0, /* during preflop betting. */\n  POSTFLOP: 1, /* during postflop betting */\n  POSTTURN: 2, /* during turn betting */\n  POSTRIVER: 3, /* during river betting*/\n  SHOWDOWN: 4, /* showdown (end) */\n});\n\nexport const ActionStatus = Object.freeze({\n    PENDING: 0, /* this action needs to be picked up + processed by a worker. */\n    ACCEPTED: 1, /* this action was validated + an event has been issued. */\n    FAILED: -1 /* there was a problem validating the action. */\n});\n\nexport const ErrorCodes = Object.freeze({\n  CLOSE_NORMAL: 1000,\n  CLOSE_GOING_AWAY: 1001,\n  UNSUPPORTED_PAYLOAD: 1007,\n  INVALID_AUTH: 4006,\n  NO_SUCH_HAND: 4007,\n  NOT_PERMITTED: 4008,\n  NO_SUCH_TABLE: 4009\n});\n\n\nexport const ActionNames = Object.freeze({\n  /* poker actions*/\n  CALL: 'call',\n  FOLD: 'fold',\n  BET: 'bet',\n  CHECK: 'check',\n  ALL_IN: 'all-in',\n\n  /* control events */\n  WELCOME: 'welcome',\n  INFO: 'info',\n  JOIN: 'join',\n  ACCEPT_JOIN: 'accept_join',\n\n  /* authentication events */\n  INVALID_AUTH: 'invalid_auth',\n  INVALID_PERMISSION: 'invalid_permission',\n\n  /* table events */\n  REQUEST_START_HAND: 'request_start_hand',\n  ACCEPT_HAND: 'accept_hand',\n  SKIP_HAND: 'skip_hand',\n  CHIPS: 'chips',\n  ACCEPT_CHIPS: 'request_chips_accept',\n  LEAVE: 'leave'\n});\n\n// actions that only the host can perform.\nexport const HostActionNames = [\n  ActionNames.ACCEPT_CHIPS,\n  ActionNames.REQUEST_START_HAND,\n  ActionNames.ACCEPT_JOIN\n];\n\nexport const EventNames = Object.freeze({\n  // indicating that anyone wanting to join at the start of the hand should reply\n  // with ACCEPT_HAND action.\n  START_HAND: 'start_hand',\n\n  // indicating that a hand will begin, with all relevant information.\n  HAND_BEGIN: 'hand_begin',\n\n  // indicating that the hand has ended, with all relevant state.\n  HAND_END: 'hand_end',\n\n  // indicating that the client who receives this is expected to reply with an\n  // action to take, by some deadline.\n  REQUEST_ACTION: 'request_action',\n\n  // informing the cards dealt privately.\n  DEAL: 'deal',\n\n  // a full snapshot of the current state of the hand.\n  HAND_STATE: 'hand_state',\n\n  // informing the cards dealt on the flop / turn / river.\n  FLOP: 'flop',\n  TURN: 'turn',\n  RIVER: 'river',\n\n  // indicating that a chips request has been placed, and the reciever (a host) should approve.\n  VERIFY_CHIPS_REQUEST: 'verify_chips_request',\n\n  // indicating that a player has left.\n  LEAVE: 'leave'\n});\n","import React from 'react';\nimport { IHandStateModel, IPlayerModel, IBaseEvent } from '../shared/schema';\n\ntype TProps = {\n  hand: IHandStateModel,\n  player: IPlayerModel\n}\n\nexport class Player extends React.Component<TProps> {\n\n  render(): React.ReactNode {\n    const player = this.props.player;\n\n    const event = player.lastAction ? JSON.parse(player.lastAction) as IBaseEvent : null;\n\n    return <div style={\n        {\n          backgroundColor: player.inHand ? undefined : 'rgba(0,0,0,.3)',\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          marginLeft: '20px',\n          marginRight: '20px'\n        }\n      }>\n      <p style={{fontWeight: 'bold'}}>{player.profile.username}</p>\n      <p>{player.stackSize - player.activeBet}</p>\n      <p>{event?.name} {event && event.data && event.data.bet_data && `(${event.data.bet_data.bet_amount})`}</p>\n    </div>;\n  }\n}\n","import React from 'react';\nimport { Api } from '../api/Api';\nimport { IHandStateModel, ITableModel, IControlEvent, IPlayerModel } from '../shared/schema';\nimport Button from 'react-bootstrap/Button';\nimport table from './Table.png';\nimport { EventNames, GameState } from '../shared/consts';\nimport { Player } from './Player';\n\ntype TProps = {\n  inviteCode: string, // invite code\n  api: Api,\n  onLeaveTable: () => void\n}\n\nconst STATE_CONNECTING = 0;\nconst STATE_CONNECTED = 1;\n\nlet ACTIVE_NOTIF : Notification | null = null;\n\ntype TState = {\n  state: number,\n  model: ITableModel | null,\n  cards: string[] | null,\n  isHost: boolean,\n  game: IHandStateModel | null,\n}\n\nexport class Table extends React.Component<TProps, TState> {\n  constructor(props: TProps) {\n    super(props);\n    const profile = this.props.api.getLoggedInProfile();\n    if (!profile) {\n      throw new Error('Not logged in.');\n    }\n    this.state = {state: STATE_CONNECTING, model: null, cards: null, game: null, isHost: false};\n    this.props.api.connectToTable(this.props.inviteCode).then((connection) => {\n      this.setState({state: STATE_CONNECTED, isHost: connection.isHost});\n      connection.onHostChanged((isHost) => {\n        this.setState({isHost})\n      });\n      connection.onEvent(this.onReceiveEvent.bind(this));\n      setTimeout(() => {\n        connection.send(connection.actions().welcome());\n      }, 400);\n      Notification.requestPermission();\n    }).catch((exc) => {\n      console.error(`Failed to connect to table: ${this.props.inviteCode}`);\n      console.error(exc);\n    });\n  }\n\n  onReceiveEvent(event: IControlEvent): void {\n    switch (event.name) {\n      case EventNames.DEAL:\n        const cards = event.data?.card_data?.cards;\n        if (cards) {\n          this.setState({cards});\n        } else {\n          this.setState({cards: null});\n        }\n        break;\n      case EventNames.HAND_STATE: {\n        const handState = event.data?.state_data;\n        if (handState) {\n          const mainPot = handState.pots[0];\n          if (mainPot.winners !== null && mainPot.winners.length > 0) {\n            const me = this.getOwnProfile(handState);\n            if (!me) {\n              this.setState({game: null});\n              return;\n            }\n            // check to see if you won.\n            if (mainPot.winners.indexOf(me.profile.id) >= 0) {\n              alert('You won!');\n            } else {\n              alert('You lost!')\n            }\n            // TODO: handle displaying sidepots.\n          }\n          this.setState({game: handState});\n          setTimeout(() => {\n            if (this.yourTurn()) {\n              ACTIVE_NOTIF = new Notification(\"It's your turn!\");\n            } else if (ACTIVE_NOTIF) {\n              ACTIVE_NOTIF.close();\n              ACTIVE_NOTIF = null;\n            }\n          }, 200);\n        }\n        break;\n      }\n    }\n  }\n\n  getActiveBet(): number {\n    if (!this.state.game) {\n      return 0;\n    }\n\n    const activeBets = this.state.game.players.map((p) => p.activeBet || 0);\n    return Math.max(...activeBets);\n  }\n\n  renderInviteCode(): React.ReactNode {\n    return <p style={{display: 'inline', color: 'rgba(255,255,255,0.5)'}}>{this.props.inviteCode}</p>;\n  }\n\n  renderControlButtons(): React.ReactNode {\n    const START_HAND_BUTTON = <Button variant=\"secondary\" onClick={() => {\n      const t = this.props.api.getActiveTable();\n      if (t) {\n        t.send(t.actions().startHand());\n      }\n    }}>\n      Start Hand\n    </Button>;\n\n    const ACCEPT_CHIPS = <Button variant=\"secondary\" onClick={() => {\n      const t = this.props.api.getActiveTable();\n      if (t) {\n        t.send(t.actions().acceptChips('test'));\n      }\n    }}>\n      Accept Chips\n    </Button>;\n\n    return <div style={{display: 'flex', flexDirection: 'row'}}>\n      <Button variant=\"secondary\" onClick={() => {\n        if (this.props.onLeaveTable) {\n          this.props.onLeaveTable();\n        }\n      }}>\n        Leave Table\n      </Button>\n      {this.state.isHost && START_HAND_BUTTON}\n      {this.state.isHost && ACCEPT_CHIPS}\n    </div>;\n  }\n\n  getOwnProfile(model: IHandStateModel): IPlayerModel | null {\n    const profile = this.props.api.getLoggedInProfile()?.id;\n    if (!profile) {\n      return null;\n    }\n    const p = model.players.find((player) => {\n      return player.profile.id === profile\n    });\n    return p ?? null;\n  }\n\n  yourTurn(): boolean {\n    if (!this.state.game) {\n      return false;\n    }\n\n    if (this.state.game.state === GameState.SHOWDOWN) {\n      return false;\n    }\n\n    const ns = this.state.game.players[this.state.game.nextSpeaker];\n\n    const profile = this.props.api.getLoggedInProfile();\n    if (!profile) {\n      console.error('Not logged in.');\n      return false;\n    }\n\n    return (ns.profile.id === profile.id);\n  }\n\n  renderGameButtons(): React.ReactNode {\n    if (this.state.game) {\n      // see if it's your turn.\n      const ns = this.state.game.players[this.state.game.nextSpeaker];\n\n      const profile = this.props.api.getLoggedInProfile();\n      if (!profile) {\n        console.error('Not logged in.');\n        return null;\n      }\n      if (ns.profile.id === profile.id) {\n        const yourBet = ns.activeBet;\n        const CHECK = <Button variant=\"secondary\" onClick={() => {\n          const t = this.props.api.getActiveTable();\n          if (t) {\n            t.send(t.actions().check());\n          }\n        }}>\n          Check\n        </Button>;\n\n        const CALL = <Button variant=\"secondary\" onClick={() => {\n          const t = this.props.api.getActiveTable();\n          if (t) {\n            t.send(t.actions().call());\n          }\n        }}>\n          Call {this.getActiveBet() - yourBet}\n        </Button>;\n\n        const bet = this.getActiveBet();\n        return <div\n          style={{display: 'flex', flexDirection: 'row'}}>\n          {(bet > 0 && yourBet < bet) ? CALL : null}\n          {(bet === yourBet) ? CHECK : null}\n          <Button variant=\"secondary\" onClick={() => {\n            const t = this.props.api.getActiveTable();\n            if (t) {\n              t.send(t.actions().fold());\n            }\n          }}>\n            Fold\n          </Button>\n          <Button variant=\"secondary\" onClick={() => {\n            const t = this.props.api.getActiveTable();\n            if (t) {\n              t.send(t.actions().bet(15));\n            }\n          }}>\n            Bet\n          </Button>\n        </div>;\n      } else {\n        return null;\n      }\n    }\n  }\n\n  renderState(): React.ReactNode {\n    if (this.state.game) {\n      const profile = this.getOwnProfile(this.state.game);\n      if (profile) {\n        const yourTurn = this.yourTurn();\n        const bet = this.getActiveBet();\n\n        let description = null;\n        if (bet === 0 && yourTurn) {\n          description = <p style={{fontStyle: 'italic'}}>The action checks to you.</p>;\n        } else if (bet > 0 && yourTurn) {\n          description = <p style={{fontStyle: 'italic'}}>Current bet: {bet}</p>;\n        }\n        const hasBet = profile.activeBet > 0;\n        return <div>\n          {description}\n          {hasBet && <p>Your bet: {profile.activeBet}</p>}\n        </div>;\n      }\n    }\n\n    return null;\n  }\n\n  renderProfiles(): React.ReactNode {\n    const hand = this.state.game;\n    if (hand) {\n      return <div style={{display: 'flex', flexDirection: 'row'}}>\n        {hand.players.map((player) => {\n          if (player.profile.id) {\n            return <Player hand={hand} player={player} />\n          } else {\n            return null;\n          }\n        })}\n      </div>\n    }\n    return null;\n  }\n\n  renderCards(): React.ReactNode {\n    if (this.state.cards) {\n      return <div style={{display: 'flex', flexDirection: 'row'}}>\n        <p>{this.state.cards[0]}</p>\n        <p>{this.state.cards[1]}</p>\n      </div>;\n    }\n\n    return null;\n  }\n\n  render(): React.ReactNode {\n    return <div style={{\n      marginTop: '40px',\n      display: 'flex',\n      alignItems: 'center',\n      flexDirection: 'column',\n      width: '100%',\n    }}>\n      <div\n        style={{\n          flexGrow: 1,\n          width: '800px',\n          height: '450px',\n          backgroundImage: `url(${table})`,\n          backgroundRepeat: 'no-repeat',\n          backgroundSize: 'contain',\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          flexDirection: 'column'\n        }}>\n        {this.renderInviteCode()}\n        <div style={{display: 'flex', flexDirection: 'row'}}>\n        {this.state.game?.communityCards.map((card) => {\n          return <p key={card} style={{fontWeight: 'bold'}}>{card}</p>;\n        })}\n        </div>\n      </div>\n      {this.renderProfiles()}\n      {this.renderState()}\n      {this.renderCards()}\n      {this.renderGameButtons()}\n      {this.renderControlButtons()}\n    </div>;\n  }\n}\n","import React from 'react';\nimport {Api} from '../api/Api';\nimport * as CSS from 'csstype';\nimport {IProfileModel, ITableModel} from '../shared/schema';\n\nimport Button from 'react-bootstrap/Button';\nimport Badge from 'react-bootstrap/Badge';\nimport Alert from 'react-bootstrap/Alert';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\nimport Card from 'react-bootstrap/Card';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\n\nimport {Table} from './Table';\n\n\nconst PAGE_HOME = 0;\nconst PAGE_GAME = 1;\n\nconst STATE_HOME = 0;\nconst STATE_HOST_GAME = 1;\nconst STATE_JOIN_GAME = 2;\nconst STATE_LOGIN = 3;\n\ntype TProps = {\n  api: Api,\n};\n\ntype TState = {\n  page: number,\n  user: IProfileModel | null,\n  action: number,\n  username: string,\n  password: string,\n  inviteCode: string,\n  table: string | null\n};\n\nconst topbar: CSS.Properties<string | number> = {\n  width: '100%',\n  flexDirection: 'row',\n  marginTop: '24px',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-around'\n};\n\nconst barItem: CSS.Properties = {\n  textDecoration: 'underline',\n  marginLeft: '48px',\n  marginRight: '48px',\n  padding: 'none'\n};\n\n\n\nexport class Main extends React.Component<TProps, TState> {\n\n  constructor(props: TProps) {\n    super(props);\n    this.state = {\n      page: PAGE_HOME,\n      user: this.props.api.getLoggedInProfile(),\n      action: STATE_HOME,\n      inviteCode: '',\n      table: null,\n      username: '',\n      password: ''\n    };\n    this.props.api.onLoginChanged((_profile) => {\n      console.log('login status changed.');\n      this.setStateFromApi();\n    });\n  }\n\n  render(): React.ReactNode {\n    switch (this.state.page) {\n      case PAGE_HOME:\n        return this.renderHomepage();\n      case PAGE_GAME:\n        return this.renderGame();\n    }\n  }\n\n  renderLoginButton(): React.ReactNode {\n    if (this.state.user) {\n      return <Alert.Link style={barItem}>{this.state.user.username}</Alert.Link>;\n    } else {\n      return <Alert.Link style={barItem} onClick={() => {\n        this.setState({action: STATE_LOGIN})\n      }}>login</Alert.Link>;\n    }\n  }\n\n  isLoggedIn(): boolean {\n    return this.state.user !== null;\n  }\n\n  renderTopBar(): React.ReactNode {\n    return <div style={topbar}>\n      {this.renderLoginButton()}\n      <Alert.Link>stats</Alert.Link>\n      <Alert.Link>support</Alert.Link>\n      <Alert.Link>about</Alert.Link>\n      {this.state.user ? <Alert.Link onClick={() => {this.props.api.logout().then(() => {\n        this.setState({user: null})\n      })}}>logout</Alert.Link> : null}\n    </div>;\n  }\n\n  renderNewGameMaker(): React.ReactNode {\n    return <div style={{marginTop: '64px', display: 'flex', justifyContent: 'center', flexGrow: 1}}>\n      <Card style={{ width: 'auto', padding: '18px'}}>\n        <Card.Title>Texas Hold'em</Card.Title>\n        <Card.Subtitle className=\"mb-2 text-muted\">2 hole cards, 5 community. Fast paced.</Card.Subtitle>\n        <div style={{width: 'auto', display: 'flex', flexDirection: 'column', alignItems: 'start'}}>\n          <div style={{flexDirection: 'row'}}>\n          <Button\n            variant=\"primary\"\n            onClick={() => {\n              this.props.api.createTable({game: 0, smallBlind: 1, bigBlind: 2}).then((table: ITableModel) => {\n                console.log(`Created table '${table.inviteCode}'.`);\n                this.setState({table: table.inviteCode, action: STATE_HOST_GAME});\n              }).catch((error: any) => {\n                alert('Failed: ' + error);\n              });\n            }}\n            style={{width: '180px', marginRight: '6px'}}>Host Game</Button>\n          <OverlayTrigger\n              placement=\"right\"\n              delay={{ show: 250, hide: 400 }}\n              overlay={<Tooltip id={'tooltip'}>This site is in beta! Please report any bugs.</Tooltip>}\n            >\n          <Badge pill={true} variant=\"warning\" style={{display: 'inline'}}>Warning!</Badge>\n          </OverlayTrigger>\n          </div>\n          <Button\n            onClick={() => {\n              this.setState({action: STATE_JOIN_GAME});\n            }}\n            variant=\"primary\"\n            style={{width: '180px', marginTop: \"12px\"}}>Join Game</Button>\n          <Button disabled={true} variant=\"primary\" style={{width: '180px', marginTop: \"12px\"}}>Matchmaking</Button>\n          </div>\n        </Card>\n      </div>;\n  }\n\n  renderMainContent(): React.ReactNode {\n    if (this.isLoggedIn()) {\n      const table = this.state.table;\n      if (!table) {\n        return this.renderNewGameMaker();\n      } else {\n        return this.renderSelectedTable(table);\n      }\n    } else {\n      return null;\n    }\n  }\n\n  renderSelectedTable(table: string): React.ReactNode {\n    return <div style={{display: 'flex', flexGrow: 1}}>\n        <Table\n          api={this.props.api}\n          inviteCode={table}\n          onLeaveTable={() => {\n            this.props.api.disconnectFromTable();\n            this.setState({table: null});\n          }}\n          />\n          </div>;\n  }\n\n  renderHomepage(): React.ReactNode {\n    return <div>\n      {this.renderTopBar()}\n      {this.renderMainContent()}\n      {this.renderLoginModal()}\n      {this.renderJoinModal()}\n    </div>;\n  }\n\n  renderJoinModal(): React.ReactNode {\n    const close = () => {this.setState({action: STATE_HOME})};\n\n    return <Modal show={this.state.action === STATE_JOIN_GAME} onHide={\n      () => {this.setState({action: STATE_HOME})}\n    }>\n          <Modal.Header closeButton={true}>\n            <Modal.Title>Join Game</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n              <Form.Group controlId=\"formBasicEmail\">\n                <Form.Label>Invite Code</Form.Label>\n                <input type=\"text\" value={this.state.inviteCode} onChange={(e) => {this.setState({inviteCode: e.target.value})}} />\n              </Form.Group>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button type=\"submit\" variant=\"primary\" onClick={() => {\n              this.setState({table: this.state.inviteCode, action: STATE_HOME});\n            }}>\n              Login\n            </Button>\n            <Button variant=\"secondary\" onClick={close}>\n              Cancel\n            </Button>\n          </Modal.Footer>\n      </Modal>\n  }\n\n  renderLoginModal(): React.ReactNode {\n    const close = () => {this.setState({action: STATE_HOME})};\n\n    return <Modal show={this.state.action === STATE_LOGIN} onHide={\n      () => {this.setState({action: STATE_HOME})}\n    }>\n          <Modal.Header closeButton={true}>\n            <Modal.Title>Login</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n              <Form.Group controlId=\"formBasicEmail\">\n                <Form.Label>Username</Form.Label>\n                <input type=\"text\" value={this.state.username} onChange={(e) => {this.setState({username: e.target.value})}} />\n              </Form.Group>\n              <Form.Group controlId=\"formBasicPassword\">\n                <Form.Label>Password</Form.Label>\n                <input type=\"text\" value={this.state.password} onChange={(e) => {this.setState({password: e.target.value})}} />\n              </Form.Group>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button type=\"submit\" variant=\"primary\" onClick={() => {\n              this.props.api.logIn(this.state.username, this.state.password).then(() => {\n                this.setState({\n                  user: this.props.api.getLoggedInProfile(),\n                  action: STATE_HOME\n                });\n              }).catch((err) => {\n                alert(err);\n              });\n            }}>\n              Login\n            </Button>\n            <Button variant=\"secondary\" onClick={close}>\n              Cancel\n            </Button>\n          </Modal.Footer>\n      </Modal>\n  }\n\n  renderGame(): React.ReactNode {\n    const table = this.state.table;\n    if (!table) {\n      return null;\n    }\n    return this.renderSelectedTable(table);\n  }\n\n  setStateFromApi() {\n    const profile = this.props.api.getLoggedInProfile();\n    console.log(`profile: ${JSON.stringify(profile)}`);\n    this.setState({\n      user: profile\n    });\n  }\n\n  componentDidMount() {\n    this.setStateFromApi();\n    this.props.api.onMount();\n  }\n}\n","export class WebsocketUtils {\n    public static websocketUrlByPath(path: string): string {\n        return this.websocketProtocolByLocation() +\n            window.location.hostname +\n            this.websocketPortWithColonByLocation() +\n            window.location.pathname +\n            path;\n    }\n\n    private static websocketProtocolByLocation(): string {\n        return window.location.protocol === \"https:\" ? \"wss://\" : \"ws://\";\n    }\n\n    private static websocketPortWithColonByLocation(): string {\n        const defaultPort = window.location.protocol === \"https:\" ? \"443\" : \"80\";\n        if (window.location.port !== defaultPort) {\n            return \":\" + window.location.port;\n        } else {\n            return \"\";\n        }\n    }\n}\n","import {ActionNames} from '../shared/consts';\nimport {IAction, IBetData, IWireProfileModel} from '../shared/schema';\n\nexport class Actions {\n\n  player: IWireProfileModel\n  table: string\n\n  constructor(player: IWireProfileModel, table: string) {\n    this.player = player;\n    this.table = table;\n  }\n\n  static serialize(action: IAction) {\n    return JSON.stringify(action);\n  }\n\n  static fromString(data: string): IAction {\n    const contents = JSON.parse(data);\n    return {\n      ...contents,\n    };\n  }\n\n  static forPlayer(player: IWireProfileModel, table: string): Actions {\n    return new Actions(player, table);\n  }\n\n  withBetData(name: string, data: IBetData | null): IAction {\n    return {\n      type: name,\n      table: this.table,\n      data,    /* the four number pin to rejoin */\n      origin: this.player.id\n    };\n  }\n\n  welcome(): IAction {\n    return this.withBetData(ActionNames.WELCOME, null);\n  }\n\n  check(): IAction {\n    return this.withBetData(ActionNames.CHECK, null);\n  }\n\n  call(): IAction {\n    return this.withBetData(ActionNames.CALL, null);\n  }\n\n  fold(): IAction {\n    return this.withBetData(ActionNames.FOLD, null);\n  }\n\n  requestChips(amount: string): IAction {\n    return this.withBetData(ActionNames.CHIPS, {amount: parseInt(amount, 10), is_all_in: false});\n  }\n\n  acceptChips(_requestId: string): IAction {\n    // TODO(correctness): put in the id\n    return this.withBetData(ActionNames.ACCEPT_CHIPS, null);\n  }\n\n  leave(): IAction {\n    return this.withBetData(ActionNames.LEAVE, null);\n  }\n\n  bet(amount: number, isAllIn: boolean = false): IAction {\n    return this.withBetData(ActionNames.BET, {\n      amount,\n      is_all_in: isAllIn\n    });\n  }\n\n  startHand(): IAction {\n    return this.withBetData(ActionNames.REQUEST_START_HAND, null);\n  }\n}\n","import { Api, GameConnection } from \"./Api\";\nimport { WebsocketUtils } from './Utils';\nimport WebSocket from 'isomorphic-ws';\nimport {IBaseEvent, IWireProfileModel, IAction} from '../shared/schema';\nimport {IGameInformationResponse} from '../shared/requests';\nimport {NetworkApi} from './NetworkApi';\nimport { Actions } from \"./Actions\";\nimport querystring from 'querystring';\n\n\nexport class WebsocketGameConnection implements GameConnection {\n\n  api: Api\n  user: IWireProfileModel\n  tableId: string\n  ws: WebSocket\n  _onEvent: ((event: IBaseEvent) => void) | null\n  _onHostChange: ((isHost: boolean) => void) | null\n  isHost: boolean\n\n  constructor(\n    api: Api,\n    tableId: string\n  ) {\n    this.api = api;\n    this.tableId = tableId;\n    this.isHost = false;\n\n    const user = this.api.getLoggedInProfile();\n    if (!user) {\n      throw new Error('Not logged in.');\n    }\n    this.user = user;\n    const queryString = querystring.encode({user: user.id, token: user.token, table: this.tableId});\n    const url = WebsocketUtils.websocketUrlByPath(NetworkApi.API_PREFIX_NO_LEADING_SLASH + 'stream?' + queryString);\n    console.log(`Connecting to url: ${url}`);\n    this.ws = new WebSocket(url);\n    this._onEvent = null;\n    this._onHostChange = null;\n  }\n\n  actions(): Actions {\n    const user = this.api.getLoggedInProfile();\n    if (!user) {\n      throw new Error('Not logged in.');\n    }\n\n    return Actions.forPlayer(user, this.tableId);\n  }\n\n  connect(): Promise<void> {\n    console.log('attempting to connect...');\n    return new Promise((resolve, reject) => {\n      // fwd declaration so that they can mutually reference eachother.\n      let listenerOpen:  (() => void) | null = null;\n      let listenerError: (() => void) | null = null;\n\n      listenerOpen = () => {\n        console.log('opened!');\n        resolve();\n        if (this.ws.onerror === listenerError) {\n          this.ws.onerror = () => {};\n        }\n      }\n\n      listenerError = () => {\n        console.log('error!!');\n        reject();\n        if (this.ws.onopen === listenerOpen) {\n          this.ws.onopen = () => {};\n        }\n      }\n\n      this.ws.onopen = listenerOpen;\n      this.ws.onerror = listenerError;\n    });\n  }\n\n  getProfile(): IWireProfileModel | null {\n    return this.api.getLoggedInProfile();\n  }\n\n  getTableId(): string {\n    return this.tableId;\n  }\n\n  send(action: IAction): void {\n    if (this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(action));\n    } else {\n      console.error('Failed to send action, socket wasnt ready');\n    }\n  }\n\n  refresh(): Promise<IGameInformationResponse> {\n    throw new Error(\"Method not implemented.\");\n  }\n\n  onHostChanged(callback: (isHost: boolean) => void) {\n    this._onHostChange = callback;\n  }\n\n  onEvent(callback: (event: IBaseEvent) => void): void {\n    // attach the listener.\n    this.ws.onmessage = (event: WebSocket.MessageEvent) => {\n      const data = JSON.parse(event.data.toString()) as IBaseEvent;\n      const welcomeData = data.data?.welcome_data;\n      if (welcomeData) {\n        this.isHost = welcomeData.is_host;\n        if (this._onHostChange) {\n          this._onHostChange(this.isHost);\n        }\n      }\n      if (this._onEvent) {\n        this._onEvent(data as IBaseEvent);\n      }\n    };\n    this._onEvent = callback;\n  }\n\n  close(): void {\n    if (this.ws && (this.ws.readyState === WebSocket.OPEN)) {\n      // close the socket.\n      this.ws.close();\n    }\n  }\n}\n","import { Api, GameConnection } from \"./Api\";\nimport { ITableModel, ITableConfig, IWireProfileModel } from '../shared/schema';\nimport {\n    TTableCreatePostData,\n    TTableCreateResponse,\n    TLoginPostData,\n    TLoginResponse,\n    TProfileCreatePostData,\n    TProfileCreateResponse,\n    TProfileResponse} from '../shared/requests';\nimport axios, { AxiosRequestConfig } from 'axios';\nimport { WebsocketGameConnection } from './WebsocketGameConnection';\nimport Cookies from 'js-cookie'\n\n\nexport class NetworkApi implements Api {\n\n  static API_PREFIX: string = '/api/v1/';\n  static API_PREFIX_NO_LEADING_SLASH: string = 'api/v1/';\n\n  static network = axios.create({baseURL: NetworkApi.API_PREFIX})\n\n  _loggedInProfile: IWireProfileModel | null = null;\n  _ws: WebsocketGameConnection | null = null;\n  _onLoginChangeCallback: ((profile: IWireProfileModel | null) => void) | null = null;\n\n  constructor() {\n    NetworkApi.network.interceptors.response.use((response) => {\n      // Do something with response data\n      return response;\n    }, (error) => {\n      if (error.response.status === 401) {\n        // not authorized === logged out.\n        this.logout();\n      }\n      // Do something with response error\n      return Promise.reject(error);\n    });\n  }\n\n  onLoginChanged(callback: (profile: IWireProfileModel | null) => void) {\n    this._onLoginChangeCallback = callback;\n  }\n\n  isConnectedToTable(): boolean {\n    return this._ws !== null;\n  }\n\n  getActiveTable(): GameConnection | null {\n    return this._ws;\n  }\n\n  _requestOptions(): AxiosRequestConfig {\n    return {\n      headers: {'Content-Type': 'application/json'},\n      withCredentials: true\n    };\n  }\n\n  async createTable(config: ITableConfig): Promise<ITableModel> {\n    const profile = this.getLoggedInProfile();\n    if (!profile) {\n      throw new Error('Not logged in.');\n    }\n\n    const data: TTableCreatePostData = {\n      config\n    };\n\n    const response = await NetworkApi.network.post<TTableCreateResponse>(\n      'table/create',\n      data,\n      this._requestOptions()\n    );\n    if (response.status !== 200 || !response.data.success) {\n      throw new Error(\"Error creating table: \" + response.data.error);\n    }\n\n    return response.data.table;\n  }\n\n  onMount(): void {\n    // refresh the profile.\n    const token = Cookies.get('user');\n    if (token) {\n      const profile = window.localStorage.getItem('user');\n      if (profile) {\n        this._setProfile(JSON.parse(profile))\n      }\n      this.refreshProfile().then((prof) => {\n        this._setProfile(prof);\n      }).catch((err) => {\n        console.error(err);\n      });\n    }\n  }\n\n  disconnectFromTable() {\n    if (this._ws) {\n      this._ws.send(this._ws.actions().leave());\n      this._ws.close();\n      window.localStorage.removeItem('table');\n    }\n  }\n\n  async connectToTable(tableId: string): Promise<GameConnection> {\n    this._ws = new WebsocketGameConnection(this, tableId);\n    await this._ws.connect();\n    window.localStorage.setItem('table', tableId);\n    return this._ws;\n  }\n\n  async createProfile(username: string, email: string, password: string): Promise<IWireProfileModel> {\n    const data: TProfileCreatePostData = {\n      username,\n      email,\n      pin: password\n    };\n\n    const response = await NetworkApi.network.post<TProfileCreateResponse>(\n      'profile/create',\n      data\n    );\n\n    if (response.status !== 200 || !response.data.success) {\n      throw new Error(\"Error creating profile: \" + response.data.error);\n    }\n\n    const profile = response.data.profile;\n    if (!profile) {\n      throw new Error('Malformed server response; expected profile.');\n    }\n\n    return profile;\n  }\n\n  isLoggedIn(): boolean {\n    return this._loggedInProfile !== null;\n  }\n\n  async logIn(username: string, password: string): Promise<IWireProfileModel> {\n    const data: TLoginPostData = {\n      username,\n      password\n    };\n\n    const response = await NetworkApi.network.post<TLoginResponse>(\n      'profile/login',\n      data\n    );\n\n    if (response.status !== 200 || !response.data.success) {\n      throw new Error(\"Error logging in: \" + response.data.error);\n    }\n\n    const profile = response.data.profile;\n    if (!profile) {\n      throw new Error(\"Failed to load logged in profile.\");\n    }\n\n    this._setProfile(profile);\n    return profile;\n  }\n\n  async refreshProfile(): Promise<IWireProfileModel> {\n    const response = await NetworkApi.network.get<TProfileResponse>(\n      'profile'\n    );\n    if (response.status !== 200 || !response.data.success) {\n      throw new Error(\"Error logging in: \" + response.data.error);\n    }\n    return response.data.profile;\n  }\n\n  async logout(): Promise<void> {\n    this._setProfile(null);\n    if (this._ws) {\n      this._ws.close();\n    }\n    this._ws = null;\n  }\n\n  _setProfile(profile: IWireProfileModel | null) {\n    this._loggedInProfile = profile;\n    if (profile === null) {\n      Cookies.remove('user');\n      window.localStorage.removeItem('user');\n    } else {\n      Cookies.set('user', profile.token);\n      window.localStorage.setItem('user', JSON.stringify(profile));\n    }\n\n    if (this._onLoginChangeCallback) {\n      this._onLoginChangeCallback(profile);\n    }\n  }\n\n  getLoggedInProfile(): IWireProfileModel | null {\n    return this._loggedInProfile;\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport {Main} from './components/main';\nimport {NetworkApi} from './api/NetworkApi';\n\nfunction App() {\n  document.title = 'The Nuts (beta)'\n  return (\n    <div className=\"App\">\n      <Main api={new NetworkApi()}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}